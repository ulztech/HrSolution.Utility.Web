@page "/readerresult"
@using HrSolution.Dto
@using HrSolution.Dto.Models.Timekeep
@inject NavigationManager NavigationManager
@inject IHttpService Http
@inject ILogger<ReaderResult> Logger
@inject ILocalStorageService Storage
@inject IJSRuntime JSRuntime
@inject ITimekeepService TimeKeepService

<PageTitle>UIXE Attendance</PageTitle>
<h3>Employee Profile</h3>

@if (TimeInOutInfo == null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm">Reading data...</div>
        </div>
    </div>
}
else
{
    <div class="col-6">
        <form>
            <div class="form-group row">
                <label for="staticEmpCode" class="col-sm-2 col-form-label">Picture</label>
                <div class="col-8">
                    <img id="image" src="data:image/bmp;base64, @imageString" />
                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmpCode" class="col-sm-2 col-form-label">Employee ID</label>
                <div class="col-8">
                    <input type="text" readonly class="form-control-plaintext" id="staticEmpCode" value="@TimeInOutInfo.EmpCode">
                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmpName" class="col-sm-2 col-form-label">Name</label>
                <div class="col-8">
                    <input type="text" readonly class="form-control-plaintext" id="staticEmpName" value="@TimeInOutInfo.EmpName">
                </div>
            </div>


            <div class="form-group row">
                <label for="staticEmpName" class="col-sm-2 col-form-label">Clock In</label>
                <div class="col-8">
                    <input type="text" readonly class="form-control" id="staticClockIn" value="@TimeInOutInfo.TimeInInfo">
                </div>
            </div>

            @if (!string.IsNullOrWhiteSpace(TimeInOutInfo.TimeOutInfo))
            {
                <div class="form-group row">
                    <label for="staticEmpName" class="col-sm-2 col-form-label">Clock Out</label>
                    <div class="col-8">
                        <input type="text" readonly class="form-control" id="staticClockOut" value="@TimeInOutInfo.TimeOutInfo">
                    </div>
                </div>
            }

            @if (!TimeInOutInfo.SkipSaving && !result.Status)
            {
                <p></p>
                <div class="form-group row">
                    <div class="col-8 offset-2">
                        <button class="btn btn-md btn-primary" @onclick="@(async () => await ConfimAndSave())">Confirm</button>
                    </div>
                </div>
            }
        </form>
        @if (!string.IsNullOrWhiteSpace(message))
        {
            <p></p>
            <div class="alert alert-info alert-dismissible fade show">
                <strong>Info!</strong> @message
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        } 
    </div>
}

@code {
    private TimeInOutDto TimeInOutInfo = null;

    private TimeInOutResultDto result = new();

    private string imageString = "";

    private string message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            TimeInOutInfo = await Storage.GetItem<TimeInOutDto>(typeof(TimeInOutDto).Name);
            message = TimeInOutInfo.Message;
            imageString = await GetImageByteAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error reading");
        }
    }

    private async Task ConfimAndSave()
    {
        try
        {
            result = TimeKeepService.ConfirmClockInOut(TimeInOutInfo);

            message = TimeInOutInfo.Message;

            if (result.Status)
            {
                await JSRuntime.InvokeVoidAsync("alert", result.Message);
                NavigationManager.NavigateTo("/reader");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error reading this ID");
        }
    }

    private async Task<string> GetImageByteAsync()
    {
        var imageProfile = await Storage.GetItem<TimeInOutDto>(typeof(TimeInOutDto).Name);
        var stream = await Http.GetStream($"ThirdParty/GetImage/{imageProfile.ImageId}");

        var result = Convert.ToBase64String(stream);

        return result;
    }

}