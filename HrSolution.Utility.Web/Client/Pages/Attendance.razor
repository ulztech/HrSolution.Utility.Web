@page "/attendance"
@attribute [Authorize]
@inject IUserService UserService

@inject IHttpService Http
@inject ILogger<Attendance> Logger

<h3>Attendance List</h3>
@if (AttendanceList == null)
{
    <div class="row">
        <div class="col-sm">Reading data...</div>
    </div>
}
else
{
    <SfGrid DataSource="@AttendanceList" AllowSorting="true" AllowPaging="true" AllowGrouping="true">
        <GridPageSettings PageSize="20"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(AttendanceDto.EmpCode) HeaderText="ID" TextAlign="TextAlign.Left" Width="120"></GridColumn>
            <GridColumn Field=@nameof(AttendanceDto.FirstName) HeaderText="First Name" TextAlign="TextAlign.Left" Width="150"></GridColumn>
            <GridColumn Field=@nameof(AttendanceDto.LastName) HeaderText="Last Name" TextAlign="TextAlign.Left" Width="150"></GridColumn>
            <GridColumn Field=@nameof(AttendanceDto.DateTimeIn) HeaderText="Date In" Format="yyyy-MM-dd" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(AttendanceDto.TimeIn) HeaderText="Time In" Type="ColumnType.TimeOnly" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(AttendanceDto.DateTimeOut) HeaderText="Date Out" Format="yyyy-MM-dd" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(AttendanceDto.TimeOut) HeaderText="Time Out" Type="ColumnType.TimeOnly" TextAlign="TextAlign.Left" Width="100"></GridColumn>
        </GridColumns>
    </SfGrid>
}


@code {
    public List<AttendanceDto> AttendanceList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AttendanceList = await Http.Get<List<AttendanceDto>>($"ThirdParty/GetAttendance"); 
        }
        catch(Exception ex)
        {
            Logger.LogError(ex, "Error reading attendance api");
        }
    } 

}
